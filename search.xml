<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 列表切片的使用</title>
    <url>/Python/Slice/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python-切片的使用"><a href="#Python-切片的使用" class="headerlink" title="Python 切片的使用"></a>Python 切片的使用</h1><h2 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = <span class="string">'ABCDEFGH'</span></span><br><span class="line"><span class="comment">#扫描0~len(ls)</span></span><br><span class="line">print(ls[:len(ls)])</span><br><span class="line"><span class="comment">#扫描-len(ls)~-1</span></span><br><span class="line">print(ls[-len(ls):])</span><br></pre></td></tr></table></figure>
<h2 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建字符串首尾空格删除函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mytrim</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> s[:<span class="number">1</span>] == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">return</span> mytrim(s[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">elif</span> s[<span class="number">-1</span>:] == <span class="string">' '</span>:</span><br><span class="line">            <span class="keyword">return</span> mytrim(s[:<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> s</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'Error'</span>)</span><br><span class="line">        <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>mybatis入门案例</title>
    <url>/Java/mybatis%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="MyBatis-入门案例"><a href="#MyBatis-入门案例" class="headerlink" title="MyBatis 入门案例"></a>MyBatis 入门案例</h1><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol>
<li><p>Mybatis 起源:起源于Apache的ibatis项目，2010年后迁至Google 更名为Mybatis，如今迁至Git上。 </p>
</li>
<li><p>Mybatis 作用:简化传统JDBC的操作，实现数据持久化。无需通过JDBC桥梁输入sql语句来进行表的增删改查,通过ORM技术简化Dao层。</p>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>ORM :实现Java类与表的映射，直接通过修改Java类便可进行对象表的修改。</p>
</li>
<li><p>与Hibernate的联系及区别：</p>
<ul>
<li>hibernate上手难度略大于mybatis</li>
<li>hibernate拥有者优秀的映射系统，可以根据实体类生成表结构，以及HQL语言优化、简化了不少sql语句的书写；而MyBatis需要手写sql语句，复杂的sql和建立映射关系需要xml文件的配置。</li>
<li>相应的，mybatis可以做更细致的sql优化。</li>
</ul>
</li>
</ol>
<h2 id="基本配置流程"><a href="#基本配置流程" class="headerlink" title="基本配置流程"></a>基本配置流程</h2><p><img src="https://i.loli.net/2020/06/04/IEVbspFG5ZqeOc7.png" alt="mybatis period"></p>
<h3 id="配置总体文件"><a href="#配置总体文件" class="headerlink" title="配置总体文件"></a>配置总体文件</h3><p>​        于根目录下创建xml配置文件,将对应头文件字符串拷贝粘贴。其中default与id保持一致，transactionManager此处使用JDBC管理，dataSource 类型为POOL -&gt; 连接池类型。其它按照JDBC连接初始化设置。</p>
<p>​        mapper设置对应mapper的classpath字段</p>
<p>​        sqlMapConfig.xml 配置</p>
<p>​        <img src="https://i.loli.net/2020/06/04/vAtFUfbMsdN24nm.png" alt="sqlMapConfig.xml jpg"></p>
<h3 id="数据库以及实体类创建"><a href="#数据库以及实体类创建" class="headerlink" title="数据库以及实体类创建"></a>数据库以及实体类创建</h3><p>​        数据库：</p>
<p>​        <img src="https://i.loli.net/2020/06/04/wYVinCkI2M9cdhL.png" alt="User 表"></p>
<p>​        pojo:        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> u_id;</span><br><span class="line">    <span class="keyword">private</span> String u_username;</span><br><span class="line">    <span class="keyword">private</span> String u_userpassword;</span><br><span class="line">    <span class="comment">//省略get、set以及构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置映射文件"><a href="#配置映射文件" class="headerlink" title="配置映射文件"></a>配置映射文件</h3><p>​        配置xml文件,mapper下属性输入命名空间（xml路径,不带格式）,select下输入sql语句配置id,返回对象类型(之前创建,对象与表一一对应),匹配参数类型（图中案例一为int类型）,接着为标准sql查询语句（注意无分号’;’）,匹配参数:</p>
<p>​        例：u_id在案例中为int类型符合parameterType参数属性，匹配项为#{字段}(基本数据字段以及String无需与表中字段保持一致)格式。</p>
<p>​        <img src="https://i.loli.net/2020/06/04/se1IHznpJEtS267.png" alt="userMapper.xml png"></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​        </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        <span class="comment">//获取SqlSessionFactory对象得到sqlSessionFactory实例</span></span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);    </span><br><span class="line">    	<span class="comment">//获取“数据会话层”对象SqlSession~JDBC Cnonection对象</span></span><br><span class="line">        SqlSession session = sessionFactory.openSession();</span><br><span class="line">        <span class="comment">//mybatis会根据命名空间.id搜索对应语句</span></span><br><span class="line">        String statment = <span class="string">"com.mybatis.map.UserMapper.selAllById"</span>;</span><br><span class="line">        User user1 = session.selectOne(statment,<span class="number">1</span>);</span><br><span class="line">        User user2 = session.selectOne(statment,<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(user1 == <span class="keyword">null</span> || user2 == <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"success"</span>);</span><br><span class="line">            System.out.println(user1 + <span class="string">"\n"</span> + user2);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"查询结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="参数分析"><a href="#参数分析" class="headerlink" title="参数分析"></a>参数分析</h3><p>​        1）    sqlMapConfig.xml:</p>
<p>​        environment id=”test” 使用id = test 环境下的配置</p>
<p>​        environment id=”development” 使用 id = development下的配置；上级标签<environments default=".">下可使用默认id即可进行数据库用户或数据库的更换。上方代码SqlSessionFactoryBuilder的build方法的第二个参数可以指定数据库环境,如””development或者”test”</p>
<p>​    dataSource:数据源类型↓</p>
<p>①  :POOLED 使用数据库连接池类似DBCP、C3P0、druid之类管理连接池工具以及进行数据库开关。</p>
<p>②  :UNPOOLED 使用传统JDBC方式连接数据库，需手动管理。</p>
<p>③  :JNDI 从Tomcat中获取一个内置的数据库连接池</p>
<p>transactionManager type=”” 事务提交方式↓</p>
<p>1）: JDBC 使用JDBC方式 进行事务提交 。(commit rollback close)&lt;手动&gt;</p>
<p>2）: MANAGED 交给其他对象处理事务如Spring ，Jobss托管 .&lt;自动,使用后默认自动关闭连接&gt;</p>
<p>2)    Mapper.xml</p>
<p>1.namespace命名空间确定了该Mapper.xml ； 而里面语句标签的id确定了唯一一个语句，因此namespace+id确认唯一一组sql语句。</p>
<p>2.Mybatis 中 SQL语句在形式上只能有一个输入、输出参数，如上述</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> sno = <span class="comment">#&#123;sno&#125; and sex = #&#123;#sex&#125; . </span></span><br><span class="line">如果是单一的根据sno查询，只需要将parameterType的值设置为<span class="built_in">int</span>类型即可；但是Mybatis中不允许输入多个值。解决方案是采用复杂类型进行替换如数组,<span class="keyword">List</span>,<span class="keyword">Set</span>以及pojo类等。Mybatis约定，如果输入/输出参数为<span class="number">8</span>个基本类型或者<span class="keyword">String</span>，则可使用任意占位符<span class="comment">#&#123;xxxx&#125;；如果为对象类型，则必须使用对应Java类对应字段名作为占位符参数。如果返回值是对象类型，则无论返回一个或者多个，resultType均输入其全类名（可通过设置别名简化操作）。</span></span><br></pre></td></tr></table></figure>
<p>3）mapper动态代理方式的DRUD(Mybatis接口开发)</p>
<p>原则:约定优于配置(x.java &gt; x.xml)</p>
<p>配置方式: eg : abc.xml .. </p>
<p>编码方式: eg: abc.java</p>
<p>Configuration con = new Configuration();  con.setName(“MyCon”);</p>
<p>在以上进行SQL查询时需要定义字符串String statement = “namespace.”+”id” ; ，反反复复如此操作颇为麻烦 ， 因此在此使用动态代理 (接口开发) 。 </p>
<p>创建接口，名称与对应映射文件名称一致(namespace的值与接口全类名相同),抽象方法返回值与resultType一致，形参与parameterType一致，方法名与xml中id一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法名以及返回与mapper.xml的id和param**一致</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">queryStudentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">queryAllStudent</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateStudent</span><span class="params">(Student student)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteStudentById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化后测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">        Reader reader = Resources.getResourceAsReader(<span class="string">"sqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);    </span><br><span class="line">        SqlSession session = sessionFactory.openSession();</span><br><span class="line">    	StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    	Student stu1 = mapper.queryStudentById(<span class="number">2</span>);</span><br><span class="line">    	<span class="keyword">if</span>(stu1 != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(stu1);</span><br><span class="line">    	List&lt;Student&gt; students = mapper.queryAllStudent();</span><br><span class="line">    	<span class="keyword">if</span>(stuents != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(Student stu : students)</span><br><span class="line">                System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    	Student s = <span class="keyword">new</span> Student(<span class="string">"Jack"</span>,<span class="keyword">true</span>,<span class="number">17</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    	<span class="keyword">int</span> flag = mapper.addStudent(s);</span><br><span class="line">    	<span class="keyword">if</span>(flag!=<span class="number">0</span>)</span><br><span class="line">			System.out.println(<span class="string">"add successfully"</span>);</span><br><span class="line">    	session.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(IOException ex)&#123;</span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"end"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="别名优化"><a href="#别名优化" class="headerlink" title="别名优化"></a>别名优化</h3><h4 id="单别名优化"><a href="#单别名优化" class="headerlink" title="单别名优化"></a>单别名优化</h4><p>​                在Mybatis总配置文件configuration标签中添加子标签<typeAliases></typeAliases>中进行别名优化，如上所述的com.mybatis.service.Student每次输入未免过于繁琐，进行如下设置可简化操作量。</p>
<p>​                <img src="https://i.loli.net/2020/06/04/3WICliSmX7MZR5B.png" alt=""></p>
<h4 id="集体优化"><a href="#集体优化" class="headerlink" title="集体优化"></a>集体优化</h4><p>​                    如上，在configuration加入子标签typeAliases下的子标签package,设置对应类的包的类路径，此时改包下的类名即别名(大小写无关)</p>
<h3 id="基本映射"><a href="#基本映射" class="headerlink" title="基本映射"></a>基本映射</h3><p>​                    <img src="https://i.loli.net/2020/06/04/i2dqyaAjWvZTLlr.png" alt=""></p>
<p>​                                                                基本关系映射</p>
<p>​                    jdbc 与 java映射</p>
<p>​            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> JdbcType </span><br><span class="line">&#123;						<span class="comment">//&lt;-resultMap Mybatis封装枚举类型结构图</span></span><br><span class="line">	    ARRAY(<span class="number">2003</span>),</span><br><span class="line">	    BIT(-<span class="number">7</span>),</span><br><span class="line">	    TINYINT(-<span class="number">6</span>),</span><br><span class="line">	    SMALLINT(<span class="number">5</span>),</span><br><span class="line">	    INTEGER(<span class="number">4</span>),</span><br><span class="line">	    BIGINT(-<span class="number">5</span>),</span><br><span class="line">	    FLOAT(<span class="number">6</span>),</span><br><span class="line">	    REAL(<span class="number">7</span>),</span><br><span class="line">	    DOUBLE(<span class="number">8</span>),</span><br><span class="line">	    NUMERIC(<span class="number">2</span>),</span><br><span class="line">	    DECIMAL(<span class="number">3</span>),</span><br><span class="line">	    CHAR(<span class="number">1</span>),</span><br><span class="line">	    VARCHAR(<span class="number">12</span>),</span><br><span class="line">	    LONGVARCHAR(-<span class="number">1</span>),</span><br><span class="line">	    DATE(<span class="number">91</span>),</span><br><span class="line">	    TIME(<span class="number">92</span>),</span><br><span class="line">	    TIMESTAMP(<span class="number">93</span>),</span><br><span class="line">	    BINARY(-<span class="number">2</span>),</span><br><span class="line">	    VARBINARY(-<span class="number">3</span>),</span><br><span class="line">	    LONGVARBINARY(-<span class="number">4</span>),</span><br><span class="line">	    NULL(<span class="number">0</span>),</span><br><span class="line">	    OTHER(<span class="number">1111</span>),</span><br><span class="line">	    BLOB(<span class="number">2004</span>),</span><br><span class="line">	    CLOB(<span class="number">2005</span>),</span><br><span class="line">	    BOOLEAN(<span class="number">16</span>),</span><br><span class="line">	    CURSOR(-<span class="number">10</span>),</span><br><span class="line">	    UNDEFINED(-<span class="number">2147482648</span>),</span><br><span class="line">	    NVARCHAR(-<span class="number">9</span>),</span><br><span class="line">	    NCHAR(-<span class="number">15</span>),</span><br><span class="line">	    NCLOB(<span class="number">2011</span>),</span><br><span class="line">	    STRUCT(<span class="number">2002</span>),</span><br><span class="line">	    JAVA_OBJECT(<span class="number">2000</span>),</span><br><span class="line">	    DISTINCT(<span class="number">2001</span>),</span><br><span class="line">	    REF(<span class="number">2006</span>),</span><br><span class="line">	    DATALINK(<span class="number">70</span>),</span><br><span class="line">	    ROWID(-<span class="number">8</span>),</span><br><span class="line">	    LONGNVARCHAR(-<span class="number">16</span>),</span><br><span class="line">	    SQLXML(<span class="number">2009</span>),</span><br><span class="line">	    DATETIMEOFFSET(-<span class="number">155</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构之顺序表</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%A1%BA%E5%BA%8F%E8%A1%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据结构线性表复习之顺序表"><a href="#数据结构线性表复习之顺序表" class="headerlink" title="数据结构线性表复习之顺序表"></a>数据结构线性表复习之顺序表</h1><h2 id="静态实现"><a href="#静态实现" class="headerlink" title="静态实现"></a>静态实现</h2><p>​        以静态的数组形式存放数据，连续的存储空间，高存储密度以及支持随机存取；由于静态，最大存储空间被锁死，无法进行拓展。</p>
<p>​        代码：（C++ 实现）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxLength 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinearList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> arr[maxLength];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>
<h2 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h2><p>​        使用动态创建存储空间进行存储。</p>
<p>​        代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DynamicList</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> *arr; <span class="comment">//数组指针</span></span><br><span class="line">    <span class="keyword">int</span> capacity; <span class="comment">//总容量</span></span><br><span class="line">    <span class="keyword">int</span> length;	<span class="comment">//当前长度</span></span><br><span class="line">&#125;SqlList;</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><p>​        以下操作均以静态表为例，指出了顺序表的常见操作。</p>
<h3 id="判断是否为空、满"><a href="#判断是否为空、满" class="headerlink" title="判断是否为空、满"></a>判断是否为空、满</h3><p>​        线性表判断是否有效根据当前长度与最大容量进行比较即可，即上界以及下界的比较</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断是否有效</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInValid</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span>;</span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span>;</span><br><span class="line"><span class="comment">//判断是否为满</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isInValid</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>.length &lt; <span class="number">0</span> || <span class="built_in">list</span>.length &gt; maxLength;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isFull</span><span class="params">(LinearList <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">list</span>.length==maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>​        顺序表在插入时需要保证未发生越界情况；若插入位置在表尾，则可以直接插入，此时的时间效率为O(1)(理想状况)；若考虑最坏情况，在表头插入元素，则需要移动n-1个元素；一般情况，每个元素被插入具有等可能性，n个元素的情况下，每个元素位置被插入的概率为1/n+1,则其分布律(矩阵形式)如下：</p>
<p>​<br><img src="https://i.loli.net/2020/06/02/idAntxqUVfwuCgv.png" alt=""><br>​<br>数学期望：<br><img src="https://i.loli.net/2020/06/02/321THrz8OfjyVBg.png" alt=""><br>​即其时间复杂度为O(n)<br><img src="https://i.loli.net/2020/06/02/ARPcWL7pK8jQSEi.png" alt=""></p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>​            </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尾插法插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElementBack</span><span class="params">(LinearList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> target)</span></span>;</span><br><span class="line"><span class="comment">//中插法插入</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElementFront</span><span class="params">(LinearList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> index, <span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElementBack</span><span class="params">(LinearList &amp; <span class="built_in">list</span>, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isFull(<span class="built_in">list</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>.arr[<span class="built_in">list</span>.length++] = target;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">insertElementFront</span><span class="params">(LinearList &amp; <span class="built_in">list</span>, <span class="keyword">int</span> index, <span class="keyword">int</span> elem)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isFull(<span class="built_in">list</span>))</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; maxLength || index &gt; <span class="built_in">list</span>.length)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">size_t</span> i = <span class="built_in">list</span>.length;</span><br><span class="line">	<span class="keyword">for</span> (; i &gt; index - <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">list</span>.arr[i] = <span class="built_in">list</span>.arr[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>.arr[i] = elem;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>​        删除元素可根据下标或者元素值进行删除，类似的，需要保证下标访问越界的问题不触发。</p>
<p>​        最优情况为删除尾部元素，时间复杂度为O(1);最坏情况为删除头部元素，需要移动n-1个元素；平均情况每个元素被删除具有等可能性，概率为1/n.若设X为移动的元素下标数，则其期望为EX = （1+n）/2 , 时间复杂度为O(n).</p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据元素删除</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteElement</span><span class="params">(LinearList &amp; <span class="built_in">list</span>, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">list</span>.arr[i] == target)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">size_t</span> k = i; k &lt; <span class="built_in">list</span>.length; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">list</span>.arr[i] = <span class="built_in">list</span>.arr[i + <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除重复(覆盖)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">deleteAllElement</span><span class="params">(LinearList &amp; <span class="built_in">list</span>, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">list</span>.arr[i] != target)</span><br><span class="line">		&#123;</span><br><span class="line">			k++;</span><br><span class="line">			<span class="built_in">list</span>.arr[k] = <span class="built_in">list</span>.arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">list</span>.length = k + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据下标删除，返回有待修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteElementByIndex</span><span class="params">(LinearList &amp; <span class="built_in">list</span>, <span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (isEmpty(<span class="built_in">list</span>))</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-666</span>;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">1</span> || index &gt; maxLength || index &gt; <span class="built_in">list</span>.length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-666</span>;</span><br><span class="line">	<span class="keyword">int</span> result = <span class="built_in">list</span>.arr[index];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = index - <span class="number">1</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</span><br><span class="line">		<span class="built_in">list</span>.arr[i] = <span class="built_in">list</span>.arr[i + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><p>​        此处的查找时最简单的蛮力法进行检索，其他更高效率的检索方案会在后面算法篇章进行介绍。</p>
<p>​        </p>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><p>​        </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据元素获取下标</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">locateElement</span><span class="params">(LinearList <span class="built_in">list</span>, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">list</span>.arr[i] == target)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="考试相关"><a href="#考试相关" class="headerlink" title="考试相关"></a>考试相关</h2><h3 id="题型一-顺序表的逆置"><a href="#题型一-顺序表的逆置" class="headerlink" title="题型一     顺序表的逆置"></a>题型一     顺序表的逆置</h3><p>​        题意：将一个顺序表逆置：顺序表的逆置比起链表简单，此处不做过多声明。</p>
<p>​        代码实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a[MaxLength] 顺序表a , a的左边界left以及右边界right</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listReversed</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> left , <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=left,j=right;i&lt;j;i++,j--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题型二-顺序表元素的移动"><a href="#题型二-顺序表元素的移动" class="headerlink" title="题型二      顺序表元素的移动"></a>题型二      顺序表元素的移动</h3><ol>
<li><p>将长度为n的数组前k(k&lt;n)个元素逆置移动到后端并要求元数据不发生丢失。</p>
<p>​    代码实现    </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=left,j=right;i&lt;left+k&amp;&amp;i&lt;j;i++,j--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        其中i<j是为了保证不发生多余交换进行限制；i < left + k 或者 j > right - k 时进行元素的交换。</p>
<p>2.将一个长度为n的数组前k(k&gt;0)个元素保持原序移动到数组后端并保证数据不丢失。</p>
</li>
</ol>
<p>​         代码实现    </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveToEndAdjust</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reverse(a, <span class="number">0</span>, k<span class="number">-1</span>, k);</span><br><span class="line">    reverse(a, <span class="number">0</span>, n<span class="number">-1</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​    3.将一个长度为n的数组a中的元素[a0,a1,a2,…]经过移动后变为[ap,ap-1,…,an-1,a0,a1,…,ap-1]；即循环左移p(0&lt;p&lt;n)个位置。</p>
<p>​        代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">movePosition</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> p, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reverse(a, <span class="number">0</span>, p<span class="number">-1</span>, p);</span><br><span class="line">    reverse(a, p, n<span class="number">-1</span>, n-p);</span><br><span class="line">    reverse(a, <span class="number">0</span>, n<span class="number">-1</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题型三-最值相关"><a href="#题型三-最值相关" class="headerlink" title="题型三      最值相关"></a>题型三      最值相关</h3><p>​        以打擂台形式求最值，将第一个元素默认为最大/小值，并以此比较，若出小更大/小者，则取而代之成为“擂主”继续PK。</p>
<p>​        代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaximum</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> &amp;pos ,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_max = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(m_max &lt; a[i])</span><br><span class="line">        &#123;</span><br><span class="line">            m_max = a[i];</span><br><span class="line">            pos = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m_max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        pos用于记录最值出现的下标。</p>
<p>​        最小值类似，在此处就略过。</p>
<h3 id="题型四-归并"><a href="#题型四-归并" class="headerlink" title="题型四      归并"></a>题型四      归并</h3><p>​        归并：即将两个有序表合并为一个表。</p>
<p>​        代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">mergeArray</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *c = <span class="keyword">new</span> <span class="keyword">int</span>[m+n];</span><br><span class="line">    <span class="keyword">int</span> i,j,k;</span><br><span class="line">    i = j = k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;m &amp;&amp; j&lt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; b[j])</span><br><span class="line">            c[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            c[k++] = b[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;m)</span><br><span class="line">        c[k++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;n)</span><br><span class="line">        c[k++] = b[j++];</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="题型五-划分"><a href="#题型五-划分" class="headerlink" title="题型五      划分"></a>题型五      划分</h3><p>​        1.题意：以顺序表第一个元素为中心，使得任意小于他的元素在其左侧，大于他的在右侧。</p>
<p>​                代码实现：            </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parition</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span> , j = n - <span class="number">1</span>;</span><br><span class="line">    tmp = arr[i];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= tmp)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            arr[i++] = arr[j];</span><br><span class="line">        <span class="keyword">while</span>(arrp[i] &lt; tmp &amp;&amp; i&lt;j)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            arr[j--] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​        2.以任意元素为中心，是的排在其左侧的元素小于其，右侧元素均大于等于它。</p>
<p>​            实现：交换该位置元素与第一元素即可。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Python numpy 库的使用</title>
    <url>/Python/python%20numpy%E5%BA%93%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Python-numpy-库的使用"><a href="#Python-numpy-库的使用" class="headerlink" title="Python numpy 库的使用"></a>Python numpy 库的使用</h1><h2 id="numpy-的安装"><a href="#numpy-的安装" class="headerlink" title="numpy 的安装"></a>numpy 的安装</h2><p>​        使用pip工具-&gt; pip install numpy进行安装</p>
<a id="more"></a>
<h2 id="基本使用以及测试"><a href="#基本使用以及测试" class="headerlink" title="基本使用以及测试"></a>基本使用以及测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.arrange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印包含0~9数字的向量</span></span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line">print(type(arr))</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">[0 1 2 3 4 5 6 7 8 9]</span><br><span class="line"><span class="tag">&lt;<span class="name">class</span> '<span class="attr">numpy.ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="numpy-数组创建"><a href="#numpy-数组创建" class="headerlink" title="numpy 数组创建"></a>numpy 数组创建</h2><h3 id="array-方法"><a href="#array-方法" class="headerlink" title="array 方法"></a>array 方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">-2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">-5</span>], [<span class="number">3</span>, <span class="number">0</span>, <span class="number">7</span>]])</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype : 指定类型 ， ndmin : 指定维度</span></span><br><span class="line"></span><br><span class="line">b = np.array([<span class="number">3.14</span>, <span class="number">2.78</span>, <span class="number">0.89</span>], dtype=float, ndmin=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<h3 id="arange-方法"><a href="#arange-方法" class="headerlink" title="arange 方法"></a>arange 方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#range(start,end,step) : [start,end)</span></span><br><span class="line">a = list(range(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#numpy 方法 arrage(start, end, step):</span></span><br><span class="line">b = numpy.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">print(<span class="string">f'array : <span class="subst">&#123;b&#125;</span>\r, type:<span class="subst">&#123;type(b)&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建随机数组"><a href="#创建随机数组" class="headerlink" title="创建随机数组"></a>创建随机数组</h2><h3 id="随机浮点数组random"><a href="#随机浮点数组random" class="headerlink" title="随机浮点数组random"></a>随机浮点数组random</h3><p>​        方法numpy.random.random : 产生(0,1)之间的浮点数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.random.random(size=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">f'array : <span class="subst">&#123;a&#125;</span>\r type :　<span class="subst">&#123;type(b)&#125;</span> '</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#产生2*3*4的随机数矩阵（3d）</span></span><br><span class="line">b = np.random.random(size = (<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br></pre></td></tr></table></figure>
<h3 id="随机整数数组randint"><a href="#随机整数数组randint" class="headerlink" title="随机整数数组randint"></a>随机整数数组randint</h3><p>​        方法numpy.random.randint 产生随机整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.random.randint(<span class="number">6</span>,<span class="number">12</span>,size=<span class="number">7</span>)</span><br><span class="line">print(<span class="string">f'array : <span class="subst">&#123;a&#125;</span> \r type : <span class="subst">&#123;type(a)&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成5~11的4行3列随机整数矩阵</span></span><br><span class="line">b = np.random.randint(<span class="number">5</span>,<span class="number">11</span>,size=(<span class="number">4</span>,<span class="number">3</span>))</span><br><span class="line">print(b)</span><br><span class="line">print(type(b))</span><br></pre></td></tr></table></figure>
<h3 id="获取标准正态样本"><a href="#获取标准正态样本" class="headerlink" title="获取标准正态样本"></a>获取标准正态样本</h3><p>​        方法numpy.random.randn 获取具有标准正态分布(EX=0,DX=1)的样本或样本集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.random.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>
<p>​        另外，方法numpy.random.normal获取指定期望以及方差的正态分布样本(集)。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#loc : EX , scale : DX , size : 个数</span></span><br><span class="line">c = np.random.normal(loc = <span class="number">2</span>, scale = <span class="number">3</span> , size = <span class="number">4</span>)</span><br></pre></td></tr></table></figure>
<h2 id="其他方法创建数组"><a href="#其他方法创建数组" class="headerlink" title="其他方法创建数组"></a>其他方法创建数组</h2><ul>
<li>numpy.zeros : 创建指定类型元素的数组(矩阵)，其余元素以0填充。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建大小为5的数组，默认为整数类型</span></span><br><span class="line">x = np.zeros(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建2*2的浮点数矩阵，填充数为0.0f</span></span><br><span class="line">y = np.zeros((<span class="number">2</span>,<span class="number">2</span>),dtype=float)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>numpy.ones:与上类似，不同的是用1进行填充。</p>
</li>
<li><p>numpy.empty:未填充，为内存初始化时的数据。</p>
</li>
<li><p>numpy.linspace:创建一个一维数组，且此数组为一个等差数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#numpy.linspace(start, stop, num, endpoint)</span></span><br><span class="line"><span class="string">'''start:begin, stop:end, num:个数, endpoint表示该值是否包含在数列：默认为True'''</span></span><br><span class="line"><span class="comment">#endpoint=True,step = (stop-start)/num; endpoint=False, step=(stop-start)/(num-1).</span></span><br><span class="line">x = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">#[10.  12.5 15.  17.5 20. ]</span></span><br><span class="line"></span><br><span class="line">y = np.linspace(<span class="number">10</span>, <span class="number">20</span>, <span class="number">5</span>, endpoint=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#[10. 12. 14. 16. 18.]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>numpy.logspace:创建一个以为数组，此数组为一等比数列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">numpy.logspace(start, stop, num, ,endpoint, base)</span></span><br><span class="line"><span class="string">start: 序列起始值; stop: 序列终止值;</span></span><br><span class="line"><span class="string">num: 生成等步长的样本数量，默认10</span></span><br><span class="line"><span class="string">base: 对数log的底数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">f = np.logspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>, endpoint=<span class="literal">False</span>, base=<span class="number">2</span>, dtype=np.int)</span><br><span class="line">print(f)</span><br><span class="line"><span class="comment">#[  1   4  16  64 256]</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="ndarray-对象字段及其方法"><a href="#ndarray-对象字段及其方法" class="headerlink" title="ndarray 对象字段及其方法"></a>ndarray 对象字段及其方法</h2><div class="table-container">
<table>
<thead>
<tr>
<th>field</th>
<th>comment</th>
</tr>
</thead>
<tbody>
<tr>
<td>ndarray.ndim</td>
<td>秩，轴的数量或维度数量</td>
</tr>
<tr>
<td>ndarray.shape</td>
<td>数组维度；若为矩阵则表示n行m列(返回元组)</td>
</tr>
<tr>
<td>ndarray.size</td>
<td>数组元素的总个数 = n*m</td>
</tr>
<tr>
<td>ndarray.dtype</td>
<td>ndarray对象元素类型</td>
</tr>
<tr>
<td>ndarray.itemsize</td>
<td>对象每个元素的大小(byte)</td>
</tr>
<tr>
<td>ndarray.flags</td>
<td>对象的内存信息</td>
</tr>
<tr>
<td>ndarray.real</td>
<td>ndarray元素的实部</td>
</tr>
<tr>
<td>ndarray.imag</td>
<td>ndarray元素的虚部</td>
</tr>
</tbody>
</table>
</div>
<h2 id="矩阵相关"><a href="#矩阵相关" class="headerlink" title="矩阵相关"></a>矩阵相关</h2><h3 id="矩阵切片以及索引"><a href="#矩阵切片以及索引" class="headerlink" title="矩阵切片以及索引"></a>矩阵切片以及索引</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">13</span>)</span><br><span class="line"><span class="comment">#将一维数组a分解为3*4的矩阵</span></span><br><span class="line">x = a.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[ 1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8]</span></span><br><span class="line"><span class="string"> [ 9 10 11 12]]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#获取第2个行向量</span></span><br><span class="line">print(h[<span class="number">1</span>])</span><br><span class="line"><span class="comment">#获取第1个列向量</span></span><br><span class="line">print(h[:, <span class="number">0</span>])</span><br><span class="line"><span class="comment">#获得全行全列</span></span><br><span class="line">print(h[:, :])</span><br><span class="line"><span class="comment">#获取第3行第4列的元素(第二为坐标形式)</span></span><br><span class="line">print(h[<span class="number">2</span>][<span class="number">3</span>])</span><br><span class="line">print(h[<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">#获取第2行第3列以及第1行第2列元素(坐标):第一个元组为行标，第二个为列标</span></span><br><span class="line">print(h[(<span class="number">1</span>, <span class="number">0</span>), (<span class="number">2</span>, <span class="number">1</span>)])</span><br><span class="line"><span class="comment">#获取2阶顺序主子矩阵(即获取前两行，前两列的子矩阵)</span></span><br><span class="line">print(h[:<span class="number">2</span>, :<span class="number">2</span>])</span><br><span class="line"><span class="comment">#获取前3行，前2列的子矩阵</span></span><br><span class="line">print(h[<span class="number">0</span>:<span class="number">3</span>, :<span class="number">2</span>])</span><br><span class="line"><span class="comment">#获取偶数列，奇数行的子矩阵</span></span><br><span class="line">print(h[::<span class="number">2</span>, <span class="number">1</span>::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<h3 id="数组-矩阵-的复制"><a href="#数组-矩阵-的复制" class="headerlink" title="数组(矩阵)的复制"></a>数组(矩阵)的复制</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">1</span>, <span class="number">13</span>)</span><br><span class="line">mat = arr.reshape(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">print(mat[:, :])</span><br><span class="line">print(arr)</span><br><span class="line">tmp = np.copy(h[:, :<span class="number">1</span>])</span><br><span class="line">mat[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">print(mat[:, :<span class="number">1</span>])</span><br><span class="line">print(id(g[<span class="number">0</span>]),id(h[<span class="number">0</span>, <span class="number">0</span>]))</span><br><span class="line">print(id(tmp[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 1  2  3  4]</span></span><br><span class="line"><span class="string"> [ 5  6  7  8]</span></span><br><span class="line"><span class="string"> [ 9 10 11 12]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> [ 1  2  3  4  5  6  7  8  9 10 11 12]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> [[-1]</span></span><br><span class="line"><span class="string"> [ 5]</span></span><br><span class="line"><span class="string"> [ 9]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> [[1]</span></span><br><span class="line"><span class="string"> [5]</span></span><br><span class="line"><span class="string"> [9]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> 2199594134072 2199594134072</span></span><br><span class="line"><span class="string"> 2199602709728</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
<p>​        可得出数组(矩阵)切片得出的子数组(矩阵)的实现方式为浅拷贝， 实际上子数组对于数值的内存地址与对应父数组的地址相同。</p>
<p>​        若不想得到这样的结果，可使用numpy的copy方法实现深拷贝。如上可知切片化的子数组内存与父数组不同。</p>
<h3 id="数组的升维以及降维的修改"><a href="#数组的升维以及降维的修改" class="headerlink" title="数组的升维以及降维的修改"></a>数组的升维以及降维的修改</h3><ul>
<li><p>reshape(row, col)</p>
<p>   参数为row, col或者元组(row, col),对于三维则输入3维向量为参数。</p>
<ol>
<li><p>numpy.reshape</p>
<p>​    为numpy的静态方法:reshape(arr,(a,b,)) : 参数1为源数组，参数2为元组(维度分割)</p>
<p>numpy.reshape(size)</p>
<p>​    对矩阵进行降维；size为元素个数，若size为-1，则表示所有元素。</p>
</li>
</ol>
</li>
<li><p>ravel</p>
<p>将多维数组转换为一维数组。</p>
</li>
</ul>
<h2 id="数组的拼接"><a href="#数组的拼接" class="headerlink" title="数组的拼接"></a>数组的拼接</h2><h4 id="水平拼接"><a href="#水平拼接" class="headerlink" title="水平拼接"></a>水平拼接</h4><p>​        使用hstack方法可将多个数组进行拼接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">l1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=<span class="number">12</span>)</span><br><span class="line">l2 = np.random.randint(<span class="number">0</span>, <span class="number">8</span>, size=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">ll1 = np.reshape(l1, (<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">ll2 = np.reshape(l2, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ls1 = np.hstack([l1, l2])</span><br><span class="line">ls2 = np.hstack([ll1, ll2])</span><br><span class="line"></span><br><span class="line">print(ls1)</span><br><span class="line">print(ls2)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[0 3 4 3 8 5 1 9 4 3 0 5 2 1 6 2 0 0 6 6 2]</span></span><br><span class="line"><span class="string">[[0 3 4 3 2 1 6]</span></span><br><span class="line"><span class="string"> [8 5 1 9 2 0 0]</span></span><br><span class="line"><span class="string"> [4 3 0 5 6 6 2]]</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h4 id="垂直拼接"><a href="#垂直拼接" class="headerlink" title="垂直拼接"></a>垂直拼接</h4><p>​        使用vstack方法进行多个数组的拼接。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">l1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, size=<span class="number">12</span>)</span><br><span class="line">l2 = np.random.randint(<span class="number">0</span>, <span class="number">8</span>, size=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">ll1 = np.reshape(l1, (<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line">ll2 = np.reshape(l2, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">ls = np.vstack([ll1, ll2])</span><br><span class="line"></span><br><span class="line">print(ls)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">[[0 7 4]</span></span><br><span class="line"><span class="string"> [7 6 9]</span></span><br><span class="line"><span class="string"> [8 2 3]</span></span><br><span class="line"><span class="string"> [2 0 7]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[[1 6 0]</span></span><br><span class="line"><span class="string"> [6 4 6]</span></span><br><span class="line"><span class="string"> [5 0 2]]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[[0 7 4]</span></span><br><span class="line"><span class="string"> [7 6 9]</span></span><br><span class="line"><span class="string"> [8 2 3]</span></span><br><span class="line"><span class="string"> [2 0 7]</span></span><br><span class="line"><span class="string"> [1 6 0]</span></span><br><span class="line"><span class="string"> [6 4 6]</span></span><br><span class="line"><span class="string"> [5 0 2]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h4 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h4><p>​        concatenate方法可进行水平或者垂直拼接：numpy.concatenate(array1,array2,axis=0),默认asix=0为垂直拼接,axis = 1则为水瓶拼接。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据结构</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
</search>
